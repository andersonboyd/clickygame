{"version":3,"sources":["components/BoxCard/index.js","components/Header/index.js","components/Nav/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["BoxCard","props","react_default","a","createElement","className","onClick","handleClick","id","name","src","image","alt","isclicked","isClicked","Header","Nav","count","Wrapper","children","App","state","chars","shuffle","t","i","length","Math","floor","random","console","log","concat","charPickedIndex","char","_this","alert","window","location","reload","setState","_this2","this","components_Nav","components_Header","components_Wrapper","map","components_BoxCard","key","Component","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qpDAgBeA,MAbf,SAAiBC,GACb,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAClBH,EAAAC,EAAAC,cAAA,OAAKE,QAAS,kBAAML,EAAMM,YAAYN,EAAMO,GAAIP,EAAMQ,OAAOJ,UAAU,iBACnEH,EAAAC,EAAAC,cAAA,OACII,GAAIP,EAAMO,GACVE,IAAKT,EAAMU,MACXC,IAAKX,EAAMQ,KACXI,UAAWZ,EAAMa,qBCDlBC,MANf,WACI,OAAOb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAClBH,EAAAC,EAAAC,cAAA,oDCKOY,MAPf,SAAaf,GACT,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAClBH,EAAAC,EAAAC,cAAA,mDACAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,YAAoCJ,EAAMgB,MAA1C,eCCOC,MAJf,SAAiBjB,GACb,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMkB,kBC8E5BC,6MA1EbC,MAAQ,CACNC,QACAR,WAAW,EACXG,MAAO,KAGTM,QAAU,SAAAD,GAIR,IAHA,IACIE,EACAC,EAFAtB,EAAImB,EAAMI,OAGPvB,GACLsB,EAAIE,KAAKC,MAAMD,KAAKE,SAAW1B,KAC/BqB,EAAIF,EAAMnB,GACVmB,EAAMnB,GAAKmB,EAAMG,GACjBH,EAAMG,GAAKD,EAEb,OAAOF,KAGTf,YAAc,SAACC,EAAIC,GACjBqB,QAAQC,IAAR,8BAAAC,OAA0CxB,IAG1C,IAFA,IACIyB,EADEC,EAAOC,EAAKd,MAAMC,MAEfG,EAAI,EAAGA,EAAIS,EAAKR,OAAQD,IAAK,CACpBS,EAAKT,GACVjB,KAAKA,IACdyB,EAAkBR,GAGnBS,EAAKD,GAAiBnB,WACvBgB,QAAQC,IAAI,0BACZK,MAAK,0BAAAJ,OAA2BvB,EAA3B,iCAAAuB,OACiBG,EAAKd,MAAMJ,MAD5B,uCAGLoB,OAAOC,SAASC,WAEhBL,EAAKD,GAAiBnB,WAAY,EAClCqB,EAAKZ,QAAQW,GAEbC,EAAKK,SAAS,CAAClB,MAAOY,EAAMjB,MAAOkB,EAAKd,MAAMJ,MAAQ,IAC9B,KAArBkB,EAAKd,MAAMJ,OACZmB,MAAM,yBAGVN,QAAQC,IAAIG,4EAKN,IAAAO,EAAAC,KACN,OACExC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACuC,EAAD,CAAK1B,MAAOyB,KAAKrB,MAAMJ,QACvBf,EAAAC,EAAAC,cAACwC,EAAD,MACA1C,EAAAC,EAAAC,cAACyC,EAAD,KAEIvB,EAAMwB,IAAI,SAAAZ,GAAI,OACZhC,EAAAC,EAAAC,cAAC2C,EAAD,CACEC,IAAKd,EAAK1B,GACVA,GAAI0B,EAAK1B,GACTG,MAAOuB,EAAKvB,MACZF,KAAMyB,EAAKzB,KACXI,UAAWqB,EAAKpB,UAChBP,YAAakC,EAAKlC,yBAhEhB0C,aCKEC,QACW,cAA7Bb,OAAOC,SAASa,UAEe,UAA7Bd,OAAOC,SAASa,UAEhBd,OAAOC,SAASa,SAASC,MACvB,2DCbNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a8f1ca18.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction BoxCard(props){\n    return <div className=\"card\">\n        <div onClick={() => props.handleClick(props.id, props.name)} className=\"img-container\">\n            <img \n                id={props.id}\n                src={props.image} \n                alt={props.name} \n                isclicked={props.isClicked}\n            />\n        </div>\n    </div>\n}\n\nexport default BoxCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header(){\n    return <div className=\"header\">\n        <h1>\"The Gang makes a clicky game\"</h1>\n    </div>\n}\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Nav(props){\n    return <div className=\"navbar\">\n        <h5>\"It's Always Clicky in Philadelphia\"</h5>\n        <span className=\"counter\">Correct: {props.count}/12</span>\n    </div>\n}\n\nexport default Nav;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props){\n    return <div className=\"wrapper\">{props.children}</div>\n}\n\nexport default Wrapper;","import React, { Component }from 'react';\nimport BoxCard from \"./components/BoxCard\";\nimport Header from \"./components/Header\";\nimport Nav from \"./components/Nav\";\nimport Wrapper from \"./components/Wrapper\";\nimport chars from \"./chars.json\";\n\nclass App extends Component {\n  state = {\n    chars,\n    isClicked: false,\n    count: 0\n  }\n\n  shuffle = chars => {\n    let a = chars.length;\n    let t;\n    let i;\n    while (a) {\n      i = Math.floor(Math.random() * a--)\n      t = chars[a];\n      chars[a] = chars[i];\n      chars[i] = t;\n    }\n    return chars;\n  }\n\n  handleClick = (id, name) => {\n    console.log(`stop clicking me, my id is ${id}`);\n    const char = this.state.chars;\n    let charPickedIndex;\n    for (let i = 0; i < char.length; i++) {\n      const element = char[i];\n      if(element.id===id){\n        charPickedIndex = i;\n      }\n    }\n    if(char[charPickedIndex].isClicked){\n      console.log(\"You already clicked me\");\n      alert(`You already clicked on ${name}!\n      Your final score is ${this.state.count}.\n      Press 'OK' to play again.`)\n      window.location.reload();\n    }else{\n      char[charPickedIndex].isClicked = true;\n      this.shuffle(char);\n      // const count = this.state.count;\n      this.setState({chars: char, count: this.state.count + 1});\n      if(this.state.count === 11){\n        alert(\"You win! Play again?\");\n      }\n    }\n    console.log(char);\n  }\n\n  //alert function????\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Nav count={this.state.count}/>\n        <Header />\n        <Wrapper>\n          {\n            chars.map(char =>\n              <BoxCard \n                key={char.id}\n                id={char.id}\n                image={char.image}\n                name={char.name}\n                isclicked={char.isClicked}\n                handleClick={this.handleClick}\n              />\n            )\n          }\n        </Wrapper>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}